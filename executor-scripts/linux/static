#!/bin/sh
[ -z "${VERBOSE}" ] || set -x

[ -z "${IF_METRIC}" ] && IF_METRIC="1"
[ -n "${IF_VRF_TABLE}" ] && VRF_TABLE="table ${IF_VRF_TABLE}"
[ -n "${IF_VRF_MEMBER}" ] && VRF_TABLE="vrf ${IF_VRF_MEMBER}"
[ -n "${IF_METRIC}" ] && METRIC="metric ${IF_METRIC}"


addr_family() {
	if [ "$1" != "${1#*[0-9].[0-9]}" ]; then
		echo "-4"
	elif [ "$1" != "${1#*:[0-9a-fA-F]}" ]; then
		echo "-6"
	else
		exit 1
	fi
}

configure_addresses() {
	for addr in ${IF_ADDRESSES}; do
		addrfam=$(addr_family ${addr})
		if [ "${IF_POINT_TO_POINT}" -a "${addrfam}" = "-4" ]; then
			PEER="peer ${IF_POINT_TO_POINT}"
		else
			PEER=""
		fi

		if [ -z "${MOCK}" -a "${1}" = "del" ]; then
			# When having multiple addresses set from the same prefix they might/will(?) be configured
			# as 'secondary' and implicitly removed when removing the non-secondary address. This
			# leads ip complaining about not being able to remove the secondaries as they are already
			# gone. So we ignore errors while deconfiguring addresses as they liked occur when removing
			# a vanish address anyway.
			${MOCK} ip "${addrfam}" addr "${1}" "${addr}" ${PEER} dev "${IFACE}" 2>/dev/null
		else
			${MOCK} ip "${addrfam}" addr "${1}" "${addr}" ${PEER} dev "${IFACE}"
		fi
	done
}

is_busybox() {                                                                   
        local a                                                                  
        for a in $(ls -l $(which ip)); do                                        
                if [ "$(echo $a|grep busybox)" == "busybox" ]; then                        
                        return 0                                                 
                fi                                                                                                               
        done
	return 1
}                                                                                
                                                                                 
dad_wait() {                                                                     
        echo -ne "Waiting DAD from $1..."                                        
        local c=0                                                                
        local max=$1                                                             
        if is_busybox; then                                                      
                echo "W: IProute from busybox. Dad feature test is not supported. Using sleep method." >&2
                sleep $1                                                                                  
                return 0                                                                                  
        fi                                                                                                
        while true; do                                                                                    
                sleep 1                                                                                   
                c=$((${c}+1))                                                                             
                local dad=$(ip  addr show dev $IFACE tentative|grep -c 'tentative')                       
                if [[ "$dad" == "0" ]]; then                                                              
                        echo -ne "OK\n"                                                                   
                        return 0                                                                          
                fi                                                                                        
                                                                                                          
                if [[ "$c" == "$max" ]]; then                                                             
                        echo "DAD failed from $1\n"                                                       
                        return 1                                                                          
                fi                                                                                        
        done                                                                                              
                                                                                                          
}                     

configure_gateways() {
	for gw in ${IF_GATEWAYS}; do
		addrfam=$(addr_family ${gw})
		if [ "${addrfam}" == "-4" ]; then                                                         
                        if [ -n "${IF_SOURCE4}" ]; then                                                   
                                local SRC="src ${IF_SOURCE4}"                                             
                        fi                                                         
                elif [ "${addrfam}" == "-6" ]; then                                
                        if [ -n "${IF_SOURCE6}" ]; then                            
                                local SRC="src ${IF_SOURCE6}"                      
                                dad_wait 8                                  
                        fi                                                         
                fi        
		
		${MOCK} ip "${addrfam}" route "${1}" default via "${gw}" ${VRF_TABLE} ${METRIC} dev "${IFACE}" ${SRC}
	done
}

case "$PHASE" in
up)
	configure_addresses add
	configure_gateways add
	;;
down)
	configure_gateways del
	configure_addresses del
	;;
*)	exit 0 ;;
esac
